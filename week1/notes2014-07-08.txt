## Orientation

Office Hours for TAs:

Mon 7pm-9pm (Matthew)
Wed 6pm-8pm (Susanna)
Fri 6pm-8pm (James)

Class info is at http://www.cs.columbia.edu/~pblaer/cs3134/

### Regarding Java:
Dev environment — Eclipse? 
For homework, test environment specific for class
Virtual box of ubuntu based linux
Java Version 1.6

‘’'
‘''

## DATA STRUCTURES
Organizing data in a computer for efficient later use

Some goals: analyzing algorithms and their costs, easy access, etc

Basic Structures:
Arrays
Primitives (int, char, double)
Classes and their methods
Packages
Stacks
Linked List
Hash

>>> Read the math from chapter 1 and info on generics

Arrays -> stored all next to each other in contiguous memory addresses
  therefore, jump to next element in constant time (1 millionth & 5th are same)
  offset from first memory address

adding something in the middle — n time, and you may not even have enough space for it anyway

## PROOFS
### Proof by Induction
eg fibonacci numbers: F(k+1) = F(k) + F(k-1)
F(11) = 144
show that [ith fibonacci number] F(i) < (5/3)^i power, for i>=1

1) prove base case
works for i = 1:
1 < 5/3

2) Assume inductive hypothesis is true
Assume for all elements up to k, F(k) < (5/3)^k

3) Use assumption in 2 to prove true for k+1
Prove F(k+1) < (5/3)^(k+1)

F(k+1) = F(k) + F(k-1)
F(k+1) < (5/3)^k + (5/3)^(k-1)

F(k+1) < (3/5)(5/3)^(k+1) + (3/5)^2*(5/3)^(k+1)

F(k+1) < (15/25)(5/3)^(k+1) + (9/5)*(5/3)^(k+1)

F(k+1) < (24/25) * (5/3)^(k+1) < (5/3)^(k+1)

### Proof by Counterexample
F(k) <= k^2
F(11) = 144
11^2 = 121
Therefore, not true

### Proof by Contradiction
P(k) is the largest prime
Product of all primes, +1, must be bigger than P(k), so contradictory

## RECURSION
Function: 2^n
static method inside some class, only on integers, and only n >=0

    static int twoN(int n){
        if (n ==0){
            return 1;
        }


        return 2*twoN(n-1);
    }

Tail recursion — single recursive call where you iterate a number, trivial to rewrite this as a loop

Function: fibonacci recursion

    static int fib(int, n) {
        if(n==0){
            return 1;
        }
        else if(n==1){
            return 1;
        }
        return fib(n-1) + fib(n-2)
    }

Instead, write them with a loop with two values that slide along
